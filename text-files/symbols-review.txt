#                       SYMBOLS-REVIEW

#                          KEYWORDS

#   KEYWORD     |         DESCRIPTION           |          EXAMPLE
# ----------------------------------------------------------------------------

#     and       |         Logical and           |    True and False == False
# ----------------------------------------------------------------------------
#     as        |  Part of with-as statement    |   with X as Y: = pass
# ----------------------------------------------------------------------------
#    assert     | Ensure that something is True |   Assert False, "Error!"
# ----------------------------------------------------------------------------
#    break      |       Stop this loop now      |   while True: break
# ----------------------------------------------------------------------------
#   class       |         define a class        |  class person(object)
# ----------------------------------------------------------------------------
#   continue    | Don't process more of loop,   | while True: continue
#                   do it again buddy
# ----------------------------------------------------------------------------
#    def        | define a function             | def x(): pass
# ----------------------------------------------------------------------------
#    del        | Delete from dictionary        | del x[y]
# ----------------------------------------------------------------------------
#   elif        | else if condition             | if: x; elif: y; else: j
# ----------------------------------------------------------------------------
#   else        | Else condition                | if: x; elif: y; else: j
# ----------------------------------------------------------------------------
#   except      |  If an exception happens,     | except ValueError as e: print(e)
#                         do this
# ----------------------------------------------------------------------------
#    exec       |  Run a string as Python       | exec 'print("hello")'
# ----------------------------------------------------------------------------
#   finally     | Exceptions or not, finally,   | finally: pass
#                 do this no matter what
# ----------------------------------------------------------------------------
#    for        | loop over a collection things | for x in y: pass
# ----------------------------------------------------------------------------
#   from        | Import specific parts of a    | from x import y
#                          module.
# ----------------------------------------------------------------------------
#   global      |  declare you want a global    |   global x
#                         variable
# ----------------------------------------------------------------------------
#   if          |        if condition           |   if: X; elif: Y; else: J
# ----------------------------------------------------------------------------
# import        | import a module into this one,|  import os
                            to use
# ----------------------------------------------------------------------------
#  in           |    Part of for-loops.         | for X in Y: pass 1 in [1] == True
                    Also a test of X in Y
# ----------------------------------------------------------------------------
#  is           |  like == to test equality     | 1 is 1 == True
# ----------------------------------------------------------------------------
#  lambda       | Create a short anonymous      | s = lambda y: y ** y; s(3)
#                         function.
# ----------------------------------------------------------------------------
#  not          |       Logical not             | not True == False
# ----------------------------------------------------------------------------
#  or           |       Logical or              |  True or False == True
# ----------------------------------------------------------------------------
#  pass         |     This block is empty       |  def empty(): pass
# ----------------------------------------------------------------------------
#  print        |   print this string           |  print("This is a string")
# ----------------------------------------------------------------------------
#  raise        |      Raise an exception       |  raise ValueError("No")
#                     when things go wrong
# ----------------------------------------------------------------------------
#  return       |  Exit the function with a     |  def X(): return Y
                          return value.
# ----------------------------------------------------------------------------
#  try          |   Try this block, and if      |  try: pass
                    exception, go to except
# ----------------------------------------------------------------------------
#  while        |     While loop                |  while X: pass
# ----------------------------------------------------------------------------
#  with         |   With an expression as a     |  with X  as Y: pass
#                        variable do
# ----------------------------------------------------------------------------
#  yield        |  Pause here and return to     | def X(): yield Y; X().next()
#                            caller
# ----------------------------------------------------------------------------



#                             DATA TYPES
# ----------------------------------------------------------------------------
# KEYWORD      |              DESCRIPTION             |    EXAMPLE
# ----------------------------------------------------------------------------
#  True        |       True boolean value             | True or False == True
# ----------------------------------------------------------------------------
#  False       |       False boolean value            | False and True == False
# ----------------------------------------------------------------------------
#  None        |  Represents "nothing" or "no value"  | x = None
# ----------------------------------------------------------------------------
#  bytes       |    Stores bytes, maybe of:           | x = b"hello"
#                     text, PNG, file, ect
# ----------------------------------------------------------------------------
#  strings     |   Stores textual information         | x =  "hello"
# ----------------------------------------------------------------------------
#  numbers     |    Stores integers                   |  i = 100
# ----------------------------------------------------------------------------
#  floats      |     Stores decimals                  |  i = 10.389
# ----------------------------------------------------------------------------
#  lists       |      Stores a list of things         |  j = [1, 2, 3, 4]
# ----------------------------------------------------------------------------
#  dicts       | Stores a key=value mapping of things |  e = {'x': 1, 'y': 2}
# ----------------------------------------------------------------------------



#                          STRING ESCAPE SEQUENCES
# ----------------------------------------------------------------------------
#                 ESCAPE                    DESCRIPTION
# ----------------------------------------------------------------------------
#                   \\            |          Backslash
# ----------------------------------------------------------------------------
#                   \'            |          Single-quote
# ----------------------------------------------------------------------------
#                   \"            |          Double-quote
# ----------------------------------------------------------------------------
#                   \a            |            Bell
# ----------------------------------------------------------------------------
#                   \b            |           backspace
# ----------------------------------------------------------------------------
#                   \f            |           formfeed
# ----------------------------------------------------------------------------
#                   \n            |           newline
# ----------------------------------------------------------------------------
#                   \r            |           carriage
# ----------------------------------------------------------------------------
#                   \t            |             tab
# ----------------------------------------------------------------------------
#                   \v            |           vertical tab
# ----------------------------------------------------------------------------



#                              OPERATORS
# ----------------------------------------------------------------------------
#  OPERATOR       |            DESCRIPTION          |     EXAMPLE
# ----------------------------------------------------------------------------
#    +            |     Addition                    |  2 + 4 == 6
# ----------------------------------------------------------------------------
#    -            |    Subtraction                  |  4 - 2 == 2
# ----------------------------------------------------------------------------
#    *            |    Multiplication               |  4 * 2 == 8
# ----------------------------------------------------------------------------
#    **           |    Power of                     |  2 ** 4 == 16
# ----------------------------------------------------------------------------
#    /            |    Division                     |  2 / 4 == 0.5
# ----------------------------------------------------------------------------
#   //            |   Floor division                |  2 // 4 == 0
# ----------------------------------------------------------------------------
#   %             |  Modulus or string interpolate  |  2 % 4 == 2
# ----------------------------------------------------------------------------
#   <             |   Less than                     |  4 < 2 == False
# ----------------------------------------------------------------------------
#   >             |   Greater than                  |  4 > 2 == True
# ----------------------------------------------------------------------------
#  <=             |   Less than-equal               |  5 <= 4 == False
# ----------------------------------------------------------------------------
#  >=             |   Greater than-equal            |  5 >= 5 == True
# ----------------------------------------------------------------------------
#  ==             |   Equal                         |  4 == 5 == False
# ----------------------------------------------------------------------------
#  !=             |   Not-equal                     |  5 != 4 == True
# ----------------------------------------------------------------------------
#  ( )            |   Parentheses                   |  len(hi) == 2
# ----------------------------------------------------------------------------
#  [ ]            |   List brackets                 |  list = [1, 2, 3]
# ----------------------------------------------------------------------------
#  { }            |   Dict curly braces             |  {'x', 1, 'one', 'y', 3}
# ----------------------------------------------------------------------------
#  <=             |   Less than-equal               |  5 <= 4 == False
# ----------------------------------------------------------------------------
#   @             |    At(decorator)                |  @classmethod
# ----------------------------------------------------------------------------
#   ,             |      Comma                      |  range(10, 11)
# ----------------------------------------------------------------------------
#   :             |      Colon                      |  def X():
# ----------------------------------------------------------------------------
#   .             |       Dot                       |  self.x == 10
# ----------------------------------------------------------------------------
#   ;             |     Semi Colon                  |  print("Hello");
                                                       print("There")
# ----------------------------------------------------------------------------
#  +=             |    Add and assign               |  x = 1; x += 2
# ----------------------------------------------------------------------------
#  -=             |    Subtract and assign          |  x = 1; x -= 2
# ----------------------------------------------------------------------------
#  /=             |     Divide and assign           |  x = 1; x /= 2
# ----------------------------------------------------------------------------
#  *=             |     Multiply and assign         |  x = 1; x *= 2
# ----------------------------------------------------------------------------
#  //=            |    Floor divide and assign      |  x = 1; x //= 2
# ----------------------------------------------------------------------------
#  %=             |       Modulus assign            |  x = 1; x %= 2
# ----------------------------------------------------------------------------
#  **=            |        Power assign             |  x = 1; x **= 2
# ----------------------------------------------------------------------------
